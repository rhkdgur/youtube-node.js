[{"C:\\intellij\\youtube-node.js\\client\\src\\index.js":"1","C:\\intellij\\youtube-node.js\\client\\src\\serviceWorker.js":"2","C:\\intellij\\youtube-node.js\\client\\src\\components\\App.js":"3","C:\\intellij\\youtube-node.js\\client\\src\\_reducers\\index.js":"4","C:\\intellij\\youtube-node.js\\client\\src\\hoc\\auth.js":"5","C:\\intellij\\youtube-node.js\\client\\src\\_reducers\\user_reducer.js":"6","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\LoginPage\\LoginPage.js":"7","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\LandingPage\\LandingPage.js":"8","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js":"9","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\NavBar\\NavBar.js":"10","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\Footer\\Footer.js":"11","C:\\intellij\\youtube-node.js\\client\\src\\_actions\\types.js":"12","C:\\intellij\\youtube-node.js\\client\\src\\_actions\\user_actions.js":"13","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js":"14","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js":"15","C:\\intellij\\youtube-node.js\\client\\src\\components\\Config.js":"16","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\VideoUploadPage\\VideoUploadPage.js":"17"},{"size":1223,"mtime":1700368810834,"results":"18","hashOfConfig":"19"},{"size":5086,"mtime":1700368810835,"results":"20","hashOfConfig":"19"},{"size":1232,"mtime":1700373733537,"results":"21","hashOfConfig":"19"},{"size":164,"mtime":1700368810825,"results":"22","hashOfConfig":"19"},{"size":1499,"mtime":1700368810833,"results":"23","hashOfConfig":"19"},{"size":554,"mtime":1700368810825,"results":"24","hashOfConfig":"19"},{"size":5240,"mtime":1700368810829,"results":"25","hashOfConfig":"19"},{"size":471,"mtime":1700368810828,"results":"26","hashOfConfig":"19"},{"size":6457,"mtime":1700368810832,"results":"27","hashOfConfig":"19"},{"size":1364,"mtime":1700368810830,"results":"28","hashOfConfig":"19"},{"size":396,"mtime":1700368810828,"results":"29","hashOfConfig":"19"},{"size":170,"mtime":1700368810824,"results":"30","hashOfConfig":"19"},{"size":1083,"mtime":1700368810824,"results":"31","hashOfConfig":"19"},{"size":1249,"mtime":1700375244138,"results":"32","hashOfConfig":"19"},{"size":728,"mtime":1700368810831,"results":"33","hashOfConfig":"19"},{"size":59,"mtime":1700368810827,"results":"34","hashOfConfig":"19"},{"size":6194,"mtime":1700380460781,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"mp75lc",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},"C:\\intellij\\youtube-node.js\\client\\src\\index.js",[],[],["93","94","95","96","97","98"],"C:\\intellij\\youtube-node.js\\client\\src\\serviceWorker.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\components\\App.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\_reducers\\index.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\hoc\\auth.js",["99"],["100"],"/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect } from 'react';\r\nimport { auth } from '../_actions/user_actions';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nexport default function (SpecificComponent, option, adminRoute = null) {\r\n    function AuthenticationCheck(props) {\r\n\r\n        let user = useSelector(state => state.user);\r\n        const dispatch = useDispatch();\r\n\r\n        useEffect(() => {\r\n            //To know my current status, send Auth request \r\n            dispatch(auth()).then(response => {\r\n                //Not Loggined in Status \r\n                if (!response.payload.isAuth) {\r\n                    if (option) {\r\n                        props.history.push('/login')\r\n                    }\r\n                    //Loggined in Status \r\n                } else {\r\n                    //supposed to be Admin page, but not admin person wants to go inside\r\n                    if (adminRoute && !response.payload.isAdmin) {\r\n                        props.history.push('/')\r\n                    }\r\n                    //Logged in Status, but Try to go into log in page \r\n                    else {\r\n                        if (option === false) {\r\n                            props.history.push('/')\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n        }, [])\r\n\r\n        return (\r\n            <SpecificComponent {...props} user={user} />\r\n        )\r\n    }\r\n    return AuthenticationCheck\r\n}\r\n\r\n\r\n","C:\\intellij\\youtube-node.js\\client\\src\\_reducers\\user_reducer.js",["101"],[],"import {\r\n    LOGIN_USER,\r\n    REGISTER_USER,\r\n    AUTH_USER,\r\n    LOGOUT_USER,\r\n} from '../_actions/types';\r\n \r\n\r\nexport default function(state={},action){\r\n    switch(action.type){\r\n        case REGISTER_USER:\r\n            return {...state, register: action.payload }\r\n        case LOGIN_USER:\r\n            return { ...state, loginSucces: action.payload }\r\n        case AUTH_USER:\r\n            return {...state, userData: action.payload }\r\n        case LOGOUT_USER:\r\n            return {...state }\r\n        default:\r\n            return state;\r\n    }\r\n}","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\LoginPage\\LoginPage.js",["102","103"],[],"import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { loginUser } from \"../../../_actions/user_actions\";\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Form, Icon, Input, Button, Checkbox, Typography } from 'antd';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction LoginPage(props) {\r\n  const dispatch = useDispatch();\r\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\r\n\r\n  const [formErrorMessage, setFormErrorMessage] = useState('')\r\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked)\r\n\r\n  const handleRememberMe = () => {\r\n    setRememberMe(!rememberMe)\r\n  };\r\n\r\n  const initialEmail = localStorage.getItem(\"rememberMe\") ? localStorage.getItem(\"rememberMe\") : '';\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: initialEmail,\r\n        password: '',\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('Email is invalid')\r\n          .required('Email is required'),\r\n        password: Yup.string()\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .required('Password is required'),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password\r\n          };\r\n\r\n          dispatch(loginUser(dataToSubmit))\r\n            .then(response => {\r\n              if (response.payload.loginSuccess) {\r\n                window.localStorage.setItem('userId', response.payload.userId);\r\n                if (rememberMe === true) {\r\n                  window.localStorage.setItem('rememberMe', values.id);\r\n                } else {\r\n                  localStorage.removeItem('rememberMe');\r\n                }\r\n                props.history.push(\"/\");\r\n              } else {\r\n                setFormErrorMessage('Check out your Account or Password again')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              setFormErrorMessage('Check out your Account or Password again')\r\n              setTimeout(() => {\r\n                setFormErrorMessage(\"\")\r\n              }, 3000);\r\n            });\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          dirty,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          handleReset,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n\r\n            <Title level={2}>Log In</Title>\r\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\r\n\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"email\"\r\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Enter your email\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"password\"\r\n                  prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Enter your password\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              {formErrorMessage && (\r\n                <label ><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{formErrorMessage}</p></label>\r\n              )}\r\n\r\n              <Form.Item>\r\n                <Checkbox id=\"rememberMe\" onChange={handleRememberMe} checked={rememberMe} >Remember me</Checkbox>\r\n                <a className=\"login-form-forgot\" href=\"/reset_user\" style={{ float: 'right' }}>\r\n                  forgot password\r\n                  </a>\r\n                <div>\r\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ minWidth: '100%' }} disabled={isSubmitting} onSubmit={handleSubmit}>\r\n                    Log in\r\n                </Button>\r\n                </div>\r\n                Or <a href=\"/register\">register now!</a>\r\n              </Form.Item>\r\n            </form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginPage);\r\n\r\n\r\n","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\LandingPage\\LandingPage.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js",["104","105"],[],"import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { registerUser } from \"../../../_actions/user_actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  Form,\r\n  Input,\r\n  Button,\r\n} from 'antd';\r\n\r\nconst formItemLayout = {\r\n  labelCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 8 },\r\n  },\r\n  wrapperCol: {\r\n    xs: { span: 24 },\r\n    sm: { span: 16 },\r\n  },\r\n};\r\nconst tailFormItemLayout = {\r\n  wrapperCol: {\r\n    xs: {\r\n      span: 24,\r\n      offset: 0,\r\n    },\r\n    sm: {\r\n      span: 16,\r\n      offset: 8,\r\n    },\r\n  },\r\n};\r\n\r\nfunction RegisterPage(props) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n\r\n    <Formik\r\n      initialValues={{\r\n        email: '',\r\n        lastName: '',\r\n        name: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        name: Yup.string()\r\n          .required('Name is required'),\r\n        lastName: Yup.string()\r\n          .required('Last Name is required'),\r\n        email: Yup.string()\r\n          .email('Email is invalid')\r\n          .required('Email is required'),\r\n        password: Yup.string()\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .required('Password is required'),\r\n        confirmPassword: Yup.string()\r\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n          .required('Confirm Password is required')\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password,\r\n            name: values.name,\r\n            lastname: values.lastname,\r\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\r\n          };\r\n\r\n          dispatch(registerUser(dataToSubmit)).then(response => {\r\n            if (response.payload.success) {\r\n              props.history.push(\"/login\");\r\n            } else {\r\n              alert(response.payload.err.errmsg)\r\n            }\r\n          })\r\n\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          dirty,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          handleReset,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n            <h2>Sign up</h2>\r\n            <Form style={{ minWidth: '375px' }} {...formItemLayout} onSubmit={handleSubmit} >\r\n\r\n              <Form.Item required label=\"Name\">\r\n                <Input\r\n                  id=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  type=\"text\"\r\n                  value={values.name}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.name && touched.name ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.name && touched.name && (\r\n                  <div className=\"input-feedback\">{errors.name}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Last Name\">\r\n                <Input\r\n                  id=\"lastName\"\r\n                  placeholder=\"Enter your Last Name\"\r\n                  type=\"text\"\r\n                  value={values.lastName}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.lastName && touched.lastName ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.lastName && touched.lastName && (\r\n                  <div className=\"input-feedback\">{errors.lastName}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Email\" hasFeedback validateStatus={errors.email && touched.email ? \"error\" : 'success'}>\r\n                <Input\r\n                  id=\"email\"\r\n                  placeholder=\"Enter your Email\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Password\" hasFeedback validateStatus={errors.password && touched.password ? \"error\" : 'success'}>\r\n                <Input\r\n                  id=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required label=\"Confirm\" hasFeedback>\r\n                <Input\r\n                  id=\"confirmPassword\"\r\n                  placeholder=\"Enter your confirmPassword\"\r\n                  type=\"password\"\r\n                  value={values.confirmPassword}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.confirmPassword && touched.confirmPassword && (\r\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item {...tailFormItemLayout}>\r\n                <Button onClick={handleSubmit} type=\"primary\" disabled={isSubmitting}>\r\n                  Submit\r\n                </Button>\r\n              </Form.Item>\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\n\r\nexport default RegisterPage\r\n","C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\NavBar\\NavBar.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\Footer\\Footer.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\_actions\\types.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\_actions\\user_actions.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js",[],["106"],"C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\components\\Config.js",[],[],"C:\\intellij\\youtube-node.js\\client\\src\\components\\views\\VideoUploadPage\\VideoUploadPage.js",["107"],[],"import React, {useState} from 'react';\r\nimport { Typography,Button,Form, message,Input,Icon} from \"antd\";\r\nimport {useSelector} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport Dropzone from 'react-dropzone';\r\n\r\nconst {Title} = Typography;\r\nconst {TextArea} = Input;\r\n\r\n\r\nconst Private = [\r\n    {   value : 0 , label : 'Private'},\r\n    {   value : 1 , label : 'Public'}\r\n]\r\n\r\nconst Category = [\r\n    { value : 0, label : \"File & Animation\"},\r\n    { value : 1, label : \"Autos & Vehicles\"},\r\n    { value : 2, label : \"Music\"},\r\n    { value : 3, label : \"Pets & Animals\"},\r\n    { value : 4, label : \"Sports\"}\r\n]\r\n\r\nfunction VideoUploadPage(props) {\r\n\r\n    const user = useSelector(state => state.user);\r\n\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [privacy, setPrivacy] = useState(\"File & Animation\");\r\n    const [categories, setCategories] = useState(\"\");\r\n    const [filePath, setFilePath] = useState(\"\");\r\n    const [duration, setDuration] = useState(\"\");\r\n    const [thumbnail, setThumbnail] = useState(\"\");\r\n\r\n    const handleChangeTitle = (event) => {\r\n        setTitle(event.currentTarget.value);\r\n    }\r\n\r\n    const handleChangeDescription = (event) => {\r\n        setDescription(event.currentTarget.value);\r\n    }\r\n\r\n    const handleChangeOne = (event) => {\r\n        setPrivacy(event.currentTarget.value);\r\n    }\r\n\r\n    const handleChangeTwo = (event) => {\r\n        setCategories(event.currentTarget.value);\r\n    }\r\n\r\n    const onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(user.userData && !user.userData.isAuth){\r\n            return alert('Please Log int First');\r\n        }\r\n\r\n        // validator 체크\r\n        if(title === \"\" || description === \"\"\r\n            || categories === \"\" || filePath === \"\" ||\r\n        duration === \"\" || thumbnail === \"\"){\r\n            return alert('Please first fill all the fields')\r\n        }\r\n\r\n        const variable = {\r\n            writer : user.userData._id,\r\n            title : title,\r\n            description : description,\r\n            privacy : privacy,\r\n            filePath : filePath,\r\n            category : categories,\r\n            duration : duration,\r\n            thumbnail : thumbnail\r\n        }\r\n\r\n        axios.post('/api/video/uploadVideo', variable)\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    alert('video upload success');\r\n                    props.history.push('/')\r\n                }else{\r\n                    alert('Failed to upload video')\r\n                }\r\n            });\r\n    }\r\n\r\n    //파일 드롭 처리\r\n    const onDrop = (files) => {\r\n        let formData = new FormData();\r\n        const config = {\r\n            header : {'content-type' : 'multipart/form-data'}\r\n        }\r\n\r\n        formData.append(\"file\",files[0]);\r\n\r\n        axios.post('/api/video/uploadfiles',formData, config)\r\n            .then(response => {\r\n                if(response.data.success){\r\n                    let variable = {\r\n                        filePath : response.data.filePath,\r\n                        fileName : response.data.fileName\r\n                    }\r\n\r\n                    setFilePath(response.data.filePath)\r\n\r\n                    //thumnail 등록\r\n                    axios.post('/api/video/thumbnail',variable)\r\n                        .then(response=>{\r\n                            if(response.data.success){\r\n                                setDuration(response.data.fileDuration)\r\n                                setThumbnail(response.data.thumbsFilePath)\r\n                            }else{\r\n                                alert('Failed to make the thumbnails');\r\n                            }\r\n                        })\r\n                } else {\r\n                    alert('failed to save the video in server');\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div style={{maxWidth:'700px', margin:'2rem auto'}}>\r\n            <div style={{ textAlign:'center', marginBottom:'2rem'}}>\r\n                <Title level={2}>Upload Video</Title>\r\n            </div>\r\n            <Form onSubmit={onSubmit}>\r\n                <div style={{display:'flex', justifyContent:'space-between'}}>\r\n                    <Dropzone\r\n                        onDrop={onDrop}\r\n                        multiple={false}\r\n                        maxSize={800000000}>\r\n\r\n                        {({getRootProps, getInputProps}) => (\r\n                            <div style={{width:'300px',height:'240px',border:'1px solid lightgray', display:'flex',alignItems:'center'\r\n                                ,justifyContent:'center'}}\r\n                                 {...getRootProps()}\r\n                            >\r\n                                <input {...getInputProps()}/>\r\n                                <Icon type=\"plus\" style={{fontSize:'3rem'}}/>\r\n                            </div>\r\n                        )}\r\n\r\n                    </Dropzone>\r\n\r\n                    {thumbnail !== \"\" &&\r\n                        <div>\r\n                            <img src={`http://localhost:5000/${thumbnail}`} alt=\"haha\" />\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            <br/><br/>\r\n            <label>Title</label>\r\n            <Input onChange={handleChangeTitle} value={title} />\r\n\r\n            <br/><br/>\r\n            <label>Description</label>\r\n            <TextArea onChange={handleChangeDescription} value={description}/>\r\n\r\n            <br/><br/>\r\n\r\n            <select onChange={handleChangeOne}>\r\n                {Private.map((item,index) => (\r\n                    <option key={index} value={item.value}>{item.label}</option>\r\n                ))}\r\n            </select>\r\n            <br/><br/>\r\n\r\n            <select onChange={handleChangeTwo}>\r\n                {Category.map((item,index) => (\r\n                    <option key={index} value={item.value}>{item.label}</option>\r\n                ))}\r\n            </select>\r\n            <br/><br/>\r\n\r\n            <Button type=\"primary\" size=\"large\" onClick={onSubmit}>Submit</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoUploadPage",{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":6,"column":1,"nodeType":"122","endLine":42,"endColumn":2},{"ruleId":"123","severity":1,"message":"124","line":35,"column":12,"nodeType":"125","endLine":35,"endColumn":14,"suggestions":"126","suppressions":"127"},{"ruleId":"120","severity":1,"message":"121","line":9,"column":1,"nodeType":"122","endLine":22,"endColumn":2},{"ruleId":"128","severity":1,"message":"129","line":74,"column":11,"nodeType":"130","messageId":"131","endLine":74,"endColumn":16},{"ruleId":"128","severity":1,"message":"132","line":79,"column":11,"nodeType":"130","messageId":"131","endLine":79,"endColumn":22},{"ruleId":"128","severity":1,"message":"129","line":92,"column":11,"nodeType":"130","messageId":"131","endLine":92,"endColumn":16},{"ruleId":"128","severity":1,"message":"132","line":97,"column":11,"nodeType":"130","messageId":"131","endLine":97,"endColumn":22},{"ruleId":"133","severity":1,"message":"134","line":37,"column":11,"nodeType":"135","endLine":37,"endColumn":38,"suppressions":"136"},{"ruleId":"128","severity":1,"message":"137","line":2,"column":34,"nodeType":"130","messageId":"131","endLine":2,"endColumn":41},"dot-location",[],"new-parens",[],"no-mixed-operators",[],"no-new-object",["138"],"no-whitespace-before-property",[],"rest-spread-spacing",[],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.history'. Either include them or remove the dependency array.","ArrayExpression",["139"],["140"],"no-unused-vars","'dirty' is assigned a value but never used.","Identifier","unusedVar","'handleReset' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["141"],"'message' is defined but never used.","no-object-constructor",{"desc":"142","fix":"143"},{"kind":"144","justification":"145"},{"kind":"144","justification":"145"},"Update the dependencies array to be: [dispatch, props.history]",{"range":"146","text":"147"},"directive","",[1359,1361],"[dispatch, props.history]"]