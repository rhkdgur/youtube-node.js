{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function (Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function (Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function (Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);\n    },\n    contextTypes: function (Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function (Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function (Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function (Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function () {}\n  };\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);\n        }\n      }\n    }\n  }\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n        if (process.env.NODE_ENV !== 'production') {\n          warning(isMixinValid, \"%s: You're attempting to include a mixin that is either null \" + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);\n        }\n      }\n      return;\n    }\n    _invariant(typeof spec !== 'function', \"ReactClass: You're attempting to \" + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');\n    _invariant(!isValidElement(spec), \"ReactClass: You're attempting to \" + 'use a component as a mixin. Instead, just use a regular object.');\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n      var isReserved = (name in RESERVED_SPEC_KEYS);\n      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);\n      var isAlreadyDefined = (name in Constructor);\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name) ? ReactClassStaticInterface[name] : null;\n        _invariant(specPolicy === 'DEFINE_MANY_MERGED', 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n        return;\n      }\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function (newThis) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n  var IsMountedPreMixin = {\n    componentDidMount: function () {\n      this.__isMounted = true;\n    }\n  };\n  var IsMountedPostMixin = {\n    componentWillUnmount: function () {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function (newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n  var ReactClassComponent = function () {};\n  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function (props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (initialState === undefined && this.getInitialState._isMockFunction) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');\n    if (process.env.NODE_ENV !== 'production') {\n      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');\n      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');\n      warning(!Constructor.prototype.UNSAFE_componentWillRecieveProps, '%s has a method called UNSAFE_componentWillRecieveProps(). ' + 'Did you mean UNSAFE_componentWillReceiveProps()?', spec.displayName || 'A component');\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n    return Constructor;\n  }\n  return createClass;\n}\nmodule.exports = factory;","map":{"version":3,"names":["_assign","require","emptyObject","_invariant","process","env","NODE_ENV","warning","MIXINS_KEY","identity","fn","ReactPropTypeLocationNames","prop","context","childContext","factory","ReactComponent","isValidElement","ReactNoopUpdateQueue","injectedMixins","ReactClassInterface","mixins","statics","propTypes","contextTypes","childContextTypes","getDefaultProps","getInitialState","getChildContext","render","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","componentWillUpdate","componentDidUpdate","componentWillUnmount","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","updateComponent","ReactClassStaticInterface","getDerivedStateFromProps","RESERVED_SPEC_KEYS","displayName","Constructor","i","length","mixSpecIntoComponent","validateTypeDef","createMergedResultFunction","mixStaticSpecIntoComponent","autobind","typeDef","location","propName","hasOwnProperty","validateMethodOverride","isAlreadyDefined","name","specPolicy","ReactClassMixin","spec","typeofSpec","isMixinValid","proto","prototype","autoBindPairs","__reactAutoBindPairs","property","isReactClassMethod","isFunction","shouldAutoBind","push","createChainedFunction","isReserved","mergeIntoWithNoDuplicateKeys","one","two","key","undefined","mergedResult","a","apply","arguments","b","c","chainedFunction","bindAutoBindMethod","component","method","boundMethod","bind","__reactBoundContext","__reactBoundMethod","__reactBoundArguments","componentName","constructor","_bind","newThis","_len","args","Array","_key","reboundMethod","bindAutoBindMethods","pairs","autoBindKey","IsMountedPreMixin","__isMounted","IsMountedPostMixin","replaceState","newState","callback","updater","enqueueReplaceState","isMounted","__didWarnIsMounted","ReactClassComponent","createClass","props","refs","state","initialState","_isMockFunction","isArray","forEach","defaultProps","isReactClassApproved","componentShouldUpdate","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","methodName","module","exports"],"sources":["/Users/GAMJA/Desktop/nodejs프로젝트/boilerplate-mern-stack-master/client/node_modules/create-react-class/factory.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar emptyObject = require('fbjs/lib/emptyObject');\nvar _invariant = require('fbjs/lib/invariant');\n\nif (process.env.NODE_ENV !== 'production') {\n  var warning = require('fbjs/lib/warning');\n}\n\nvar MIXINS_KEY = 'mixins';\n\n// Helper function to allow the creation of anonymous functions which do not\n// have .name set to the name of the variable being assigned to.\nfunction identity(fn) {\n  return fn;\n}\n\nvar ReactPropTypeLocationNames;\nif (process.env.NODE_ENV !== 'production') {\n  ReactPropTypeLocationNames = {\n    prop: 'prop',\n    context: 'context',\n    childContext: 'child context'\n  };\n} else {\n  ReactPropTypeLocationNames = {};\n}\n\nfunction factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {\n  /**\n   * Policies that describe methods in `ReactClassInterface`.\n   */\n\n  var injectedMixins = [];\n\n  /**\n   * Composite components are higher-level components that compose other composite\n   * or host components.\n   *\n   * To create a new type of `ReactClass`, pass a specification of\n   * your new class to `React.createClass`. The only requirement of your class\n   * specification is that you implement a `render` method.\n   *\n   *   var MyComponent = React.createClass({\n   *     render: function() {\n   *       return <div>Hello World</div>;\n   *     }\n   *   });\n   *\n   * The class specification supports a specific protocol of methods that have\n   * special meaning (e.g. `render`). See `ReactClassInterface` for\n   * more the comprehensive protocol. Any other properties and methods in the\n   * class specification will be available on the prototype.\n   *\n   * @interface ReactClassInterface\n   * @internal\n   */\n  var ReactClassInterface = {\n    /**\n     * An array of Mixin objects to include when defining your component.\n     *\n     * @type {array}\n     * @optional\n     */\n    mixins: 'DEFINE_MANY',\n\n    /**\n     * An object containing properties and methods that should be defined on\n     * the component's constructor instead of its prototype (static methods).\n     *\n     * @type {object}\n     * @optional\n     */\n    statics: 'DEFINE_MANY',\n\n    /**\n     * Definition of prop types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    propTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types for this component.\n     *\n     * @type {object}\n     * @optional\n     */\n    contextTypes: 'DEFINE_MANY',\n\n    /**\n     * Definition of context types this component sets for its children.\n     *\n     * @type {object}\n     * @optional\n     */\n    childContextTypes: 'DEFINE_MANY',\n\n    // ==== Definition methods ====\n\n    /**\n     * Invoked when the component is mounted. Values in the mapping will be set on\n     * `this.props` if that prop is not specified (i.e. using an `in` check).\n     *\n     * This method is invoked before `getInitialState` and therefore cannot rely\n     * on `this.state` or use `this.setState`.\n     *\n     * @return {object}\n     * @optional\n     */\n    getDefaultProps: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Invoked once before the component is mounted. The return value will be used\n     * as the initial value of `this.state`.\n     *\n     *   getInitialState: function() {\n     *     return {\n     *       isOn: false,\n     *       fooBaz: new BazFoo()\n     *     }\n     *   }\n     *\n     * @return {object}\n     * @optional\n     */\n    getInitialState: 'DEFINE_MANY_MERGED',\n\n    /**\n     * @return {object}\n     * @optional\n     */\n    getChildContext: 'DEFINE_MANY_MERGED',\n\n    /**\n     * Uses props from `this.props` and state from `this.state` to render the\n     * structure of the component.\n     *\n     * No guarantees are made about when or how often this method is invoked, so\n     * it must not have side effects.\n     *\n     *   render: function() {\n     *     var name = this.props.name;\n     *     return <div>Hello, {name}!</div>;\n     *   }\n     *\n     * @return {ReactComponent}\n     * @required\n     */\n    render: 'DEFINE_ONCE',\n\n    // ==== Delegate methods ====\n\n    /**\n     * Invoked when the component is initially created and about to be mounted.\n     * This may have side effects, but any external subscriptions or data created\n     * by this method must be cleaned up in `componentWillUnmount`.\n     *\n     * @optional\n     */\n    componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component has been mounted and has a DOM representation.\n     * However, there is no guarantee that the DOM node is in the document.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been mounted (initialized and rendered) for the first time.\n     *\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidMount: 'DEFINE_MANY',\n\n    /**\n     * Invoked before the component receives new props.\n     *\n     * Use this as an opportunity to react to a prop transition by updating the\n     * state using `this.setState`. Current props are accessed via `this.props`.\n     *\n     *   componentWillReceiveProps: function(nextProps, nextContext) {\n     *     this.setState({\n     *       likesIncreasing: nextProps.likeCount > this.props.likeCount\n     *     });\n     *   }\n     *\n     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop\n     * transition may cause a state change, but the opposite is not true. If you\n     * need it, you are probably looking for `componentWillUpdate`.\n     *\n     * @param {object} nextProps\n     * @optional\n     */\n    componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Invoked while deciding if the component should be updated as a result of\n     * receiving new props, state and/or context.\n     *\n     * Use this as an opportunity to `return false` when you're certain that the\n     * transition to the new props/state/context will not require a component\n     * update.\n     *\n     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {\n     *     return !equal(nextProps, this.props) ||\n     *       !equal(nextState, this.state) ||\n     *       !equal(nextContext, this.context);\n     *   }\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @return {boolean} True if the component should update.\n     * @optional\n     */\n    shouldComponentUpdate: 'DEFINE_ONCE',\n\n    /**\n     * Invoked when the component is about to update due to a transition from\n     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`\n     * and `nextContext`.\n     *\n     * Use this as an opportunity to perform preparation before an update occurs.\n     *\n     * NOTE: You **cannot** use `this.setState()` in this method.\n     *\n     * @param {object} nextProps\n     * @param {?object} nextState\n     * @param {?object} nextContext\n     * @param {ReactReconcileTransaction} transaction\n     * @optional\n     */\n    componentWillUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component's DOM representation has been updated.\n     *\n     * Use this as an opportunity to operate on the DOM when the component has\n     * been updated.\n     *\n     * @param {object} prevProps\n     * @param {?object} prevState\n     * @param {?object} prevContext\n     * @param {DOMElement} rootNode DOM element representing the component.\n     * @optional\n     */\n    componentDidUpdate: 'DEFINE_MANY',\n\n    /**\n     * Invoked when the component is about to be removed from its parent and have\n     * its DOM representation destroyed.\n     *\n     * Use this as an opportunity to deallocate any external resources.\n     *\n     * NOTE: There is no `componentDidUnmount` since your component will have been\n     * destroyed by that point.\n     *\n     * @optional\n     */\n    componentWillUnmount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillMount`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillMount: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillReceiveProps`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',\n\n    /**\n     * Replacement for (deprecated) `componentWillUpdate`.\n     *\n     * @optional\n     */\n    UNSAFE_componentWillUpdate: 'DEFINE_MANY',\n\n    // ==== Advanced methods ====\n\n    /**\n     * Updates the component's currently mounted DOM representation.\n     *\n     * By default, this implements React's rendering and reconciliation algorithm.\n     * Sophisticated clients may wish to override this.\n     *\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     * @overridable\n     */\n    updateComponent: 'OVERRIDE_BASE'\n  };\n\n  /**\n   * Similar to ReactClassInterface but for static methods.\n   */\n  var ReactClassStaticInterface = {\n    /**\n     * This method is invoked after a component is instantiated and when it\n     * receives new props. Return an object to update state in response to\n     * prop changes. Return null to indicate no change to state.\n     *\n     * If an object is returned, its keys will be merged into the existing state.\n     *\n     * @return {object || null}\n     * @optional\n     */\n    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'\n  };\n\n  /**\n   * Mapping from class specification keys to special processing functions.\n   *\n   * Although these are declared like instance properties in the specification\n   * when defining classes using `React.createClass`, they are actually static\n   * and are accessible on the constructor instead of the prototype. Despite\n   * being static, they must be defined outside of the \"statics\" key under\n   * which all other static methods are defined.\n   */\n  var RESERVED_SPEC_KEYS = {\n    displayName: function(Constructor, displayName) {\n      Constructor.displayName = displayName;\n    },\n    mixins: function(Constructor, mixins) {\n      if (mixins) {\n        for (var i = 0; i < mixins.length; i++) {\n          mixSpecIntoComponent(Constructor, mixins[i]);\n        }\n      }\n    },\n    childContextTypes: function(Constructor, childContextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, childContextTypes, 'childContext');\n      }\n      Constructor.childContextTypes = _assign(\n        {},\n        Constructor.childContextTypes,\n        childContextTypes\n      );\n    },\n    contextTypes: function(Constructor, contextTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, contextTypes, 'context');\n      }\n      Constructor.contextTypes = _assign(\n        {},\n        Constructor.contextTypes,\n        contextTypes\n      );\n    },\n    /**\n     * Special case getDefaultProps which should move into statics but requires\n     * automatic merging.\n     */\n    getDefaultProps: function(Constructor, getDefaultProps) {\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps = createMergedResultFunction(\n          Constructor.getDefaultProps,\n          getDefaultProps\n        );\n      } else {\n        Constructor.getDefaultProps = getDefaultProps;\n      }\n    },\n    propTypes: function(Constructor, propTypes) {\n      if (process.env.NODE_ENV !== 'production') {\n        validateTypeDef(Constructor, propTypes, 'prop');\n      }\n      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);\n    },\n    statics: function(Constructor, statics) {\n      mixStaticSpecIntoComponent(Constructor, statics);\n    },\n    autobind: function() {}\n  };\n\n  function validateTypeDef(Constructor, typeDef, location) {\n    for (var propName in typeDef) {\n      if (typeDef.hasOwnProperty(propName)) {\n        // use a warning instead of an _invariant so components\n        // don't show up in prod but only in __DEV__\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            typeof typeDef[propName] === 'function',\n            '%s: %s type `%s` is invalid; it must be a function, usually from ' +\n              'React.PropTypes.',\n            Constructor.displayName || 'ReactClass',\n            ReactPropTypeLocationNames[location],\n            propName\n          );\n        }\n      }\n    }\n  }\n\n  function validateMethodOverride(isAlreadyDefined, name) {\n    var specPolicy = ReactClassInterface.hasOwnProperty(name)\n      ? ReactClassInterface[name]\n      : null;\n\n    // Disallow overriding of base class methods unless explicitly allowed.\n    if (ReactClassMixin.hasOwnProperty(name)) {\n      _invariant(\n        specPolicy === 'OVERRIDE_BASE',\n        'ReactClassInterface: You are attempting to override ' +\n          '`%s` from your class specification. Ensure that your method names ' +\n          'do not overlap with React methods.',\n        name\n      );\n    }\n\n    // Disallow defining methods more than once unless explicitly allowed.\n    if (isAlreadyDefined) {\n      _invariant(\n        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',\n        'ReactClassInterface: You are attempting to define ' +\n          '`%s` on your component more than once. This conflict may be due ' +\n          'to a mixin.',\n        name\n      );\n    }\n  }\n\n  /**\n   * Mixin helper which handles policy validation and reserved\n   * specification keys when building React classes.\n   */\n  function mixSpecIntoComponent(Constructor, spec) {\n    if (!spec) {\n      if (process.env.NODE_ENV !== 'production') {\n        var typeofSpec = typeof spec;\n        var isMixinValid = typeofSpec === 'object' && spec !== null;\n\n        if (process.env.NODE_ENV !== 'production') {\n          warning(\n            isMixinValid,\n            \"%s: You're attempting to include a mixin that is either null \" +\n              'or not an object. Check the mixins included by the component, ' +\n              'as well as any mixins they include themselves. ' +\n              'Expected object but got %s.',\n            Constructor.displayName || 'ReactClass',\n            spec === null ? null : typeofSpec\n          );\n        }\n      }\n\n      return;\n    }\n\n    _invariant(\n      typeof spec !== 'function',\n      \"ReactClass: You're attempting to \" +\n        'use a component class or function as a mixin. Instead, just use a ' +\n        'regular object.'\n    );\n    _invariant(\n      !isValidElement(spec),\n      \"ReactClass: You're attempting to \" +\n        'use a component as a mixin. Instead, just use a regular object.'\n    );\n\n    var proto = Constructor.prototype;\n    var autoBindPairs = proto.__reactAutoBindPairs;\n\n    // By handling mixins before any other properties, we ensure the same\n    // chaining order is applied to methods with DEFINE_MANY policy, whether\n    // mixins are listed before or after these methods in the spec.\n    if (spec.hasOwnProperty(MIXINS_KEY)) {\n      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);\n    }\n\n    for (var name in spec) {\n      if (!spec.hasOwnProperty(name)) {\n        continue;\n      }\n\n      if (name === MIXINS_KEY) {\n        // We have already handled mixins in a special case above.\n        continue;\n      }\n\n      var property = spec[name];\n      var isAlreadyDefined = proto.hasOwnProperty(name);\n      validateMethodOverride(isAlreadyDefined, name);\n\n      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {\n        RESERVED_SPEC_KEYS[name](Constructor, property);\n      } else {\n        // Setup methods on prototype:\n        // The following member methods should not be automatically bound:\n        // 1. Expected ReactClass methods (in the \"interface\").\n        // 2. Overridden methods (that were mixed in).\n        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);\n        var isFunction = typeof property === 'function';\n        var shouldAutoBind =\n          isFunction &&\n          !isReactClassMethod &&\n          !isAlreadyDefined &&\n          spec.autobind !== false;\n\n        if (shouldAutoBind) {\n          autoBindPairs.push(name, property);\n          proto[name] = property;\n        } else {\n          if (isAlreadyDefined) {\n            var specPolicy = ReactClassInterface[name];\n\n            // These cases should already be caught by validateMethodOverride.\n            _invariant(\n              isReactClassMethod &&\n                (specPolicy === 'DEFINE_MANY_MERGED' ||\n                  specPolicy === 'DEFINE_MANY'),\n              'ReactClass: Unexpected spec policy %s for key %s ' +\n                'when mixing in component specs.',\n              specPolicy,\n              name\n            );\n\n            // For methods which are defined more than once, call the existing\n            // methods before calling the new property, merging if appropriate.\n            if (specPolicy === 'DEFINE_MANY_MERGED') {\n              proto[name] = createMergedResultFunction(proto[name], property);\n            } else if (specPolicy === 'DEFINE_MANY') {\n              proto[name] = createChainedFunction(proto[name], property);\n            }\n          } else {\n            proto[name] = property;\n            if (process.env.NODE_ENV !== 'production') {\n              // Add verbose displayName to the function, which helps when looking\n              // at profiling tools.\n              if (typeof property === 'function' && spec.displayName) {\n                proto[name].displayName = spec.displayName + '_' + name;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  function mixStaticSpecIntoComponent(Constructor, statics) {\n    if (!statics) {\n      return;\n    }\n\n    for (var name in statics) {\n      var property = statics[name];\n      if (!statics.hasOwnProperty(name)) {\n        continue;\n      }\n\n      var isReserved = name in RESERVED_SPEC_KEYS;\n      _invariant(\n        !isReserved,\n        'ReactClass: You are attempting to define a reserved ' +\n          'property, `%s`, that shouldn\\'t be on the \"statics\" key. Define it ' +\n          'as an instance property instead; it will still be accessible on the ' +\n          'constructor.',\n        name\n      );\n\n      var isAlreadyDefined = name in Constructor;\n      if (isAlreadyDefined) {\n        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)\n          ? ReactClassStaticInterface[name]\n          : null;\n\n        _invariant(\n          specPolicy === 'DEFINE_MANY_MERGED',\n          'ReactClass: You are attempting to define ' +\n            '`%s` on your component more than once. This conflict may be ' +\n            'due to a mixin.',\n          name\n        );\n\n        Constructor[name] = createMergedResultFunction(Constructor[name], property);\n\n        return;\n      }\n\n      Constructor[name] = property;\n    }\n  }\n\n  /**\n   * Merge two objects, but throw if both contain the same key.\n   *\n   * @param {object} one The first object, which is mutated.\n   * @param {object} two The second object\n   * @return {object} one after it has been mutated to contain everything in two.\n   */\n  function mergeIntoWithNoDuplicateKeys(one, two) {\n    _invariant(\n      one && two && typeof one === 'object' && typeof two === 'object',\n      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'\n    );\n\n    for (var key in two) {\n      if (two.hasOwnProperty(key)) {\n        _invariant(\n          one[key] === undefined,\n          'mergeIntoWithNoDuplicateKeys(): ' +\n            'Tried to merge two objects with the same key: `%s`. This conflict ' +\n            'may be due to a mixin; in particular, this may be caused by two ' +\n            'getInitialState() or getDefaultProps() methods returning objects ' +\n            'with clashing keys.',\n          key\n        );\n        one[key] = two[key];\n      }\n    }\n    return one;\n  }\n\n  /**\n   * Creates a function that invokes two functions and merges their return values.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createMergedResultFunction(one, two) {\n    return function mergedResult() {\n      var a = one.apply(this, arguments);\n      var b = two.apply(this, arguments);\n      if (a == null) {\n        return b;\n      } else if (b == null) {\n        return a;\n      }\n      var c = {};\n      mergeIntoWithNoDuplicateKeys(c, a);\n      mergeIntoWithNoDuplicateKeys(c, b);\n      return c;\n    };\n  }\n\n  /**\n   * Creates a function that invokes two functions and ignores their return vales.\n   *\n   * @param {function} one Function to invoke first.\n   * @param {function} two Function to invoke second.\n   * @return {function} Function that invokes the two argument functions.\n   * @private\n   */\n  function createChainedFunction(one, two) {\n    return function chainedFunction() {\n      one.apply(this, arguments);\n      two.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Binds a method to the component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   * @param {function} method Method to be bound.\n   * @return {function} The bound method.\n   */\n  function bindAutoBindMethod(component, method) {\n    var boundMethod = method.bind(component);\n    if (process.env.NODE_ENV !== 'production') {\n      boundMethod.__reactBoundContext = component;\n      boundMethod.__reactBoundMethod = method;\n      boundMethod.__reactBoundArguments = null;\n      var componentName = component.constructor.displayName;\n      var _bind = boundMethod.bind;\n      boundMethod.bind = function(newThis) {\n        for (\n          var _len = arguments.length,\n            args = Array(_len > 1 ? _len - 1 : 0),\n            _key = 1;\n          _key < _len;\n          _key++\n        ) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        // User is trying to bind() an autobound method; we effectively will\n        // ignore the value of \"this\" that the user is trying to use, so\n        // let's warn.\n        if (newThis !== component && newThis !== null) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): React component methods may only be bound to the ' +\n                'component instance. See %s',\n              componentName\n            );\n          }\n        } else if (!args.length) {\n          if (process.env.NODE_ENV !== 'production') {\n            warning(\n              false,\n              'bind(): You are binding a component method to the component. ' +\n                'React does this for you automatically in a high-performance ' +\n                'way, so you can safely remove this call. See %s',\n              componentName\n            );\n          }\n          return boundMethod;\n        }\n        var reboundMethod = _bind.apply(boundMethod, arguments);\n        reboundMethod.__reactBoundContext = component;\n        reboundMethod.__reactBoundMethod = method;\n        reboundMethod.__reactBoundArguments = args;\n        return reboundMethod;\n      };\n    }\n    return boundMethod;\n  }\n\n  /**\n   * Binds all auto-bound methods in a component.\n   *\n   * @param {object} component Component whose method is going to be bound.\n   */\n  function bindAutoBindMethods(component) {\n    var pairs = component.__reactAutoBindPairs;\n    for (var i = 0; i < pairs.length; i += 2) {\n      var autoBindKey = pairs[i];\n      var method = pairs[i + 1];\n      component[autoBindKey] = bindAutoBindMethod(component, method);\n    }\n  }\n\n  var IsMountedPreMixin = {\n    componentDidMount: function() {\n      this.__isMounted = true;\n    }\n  };\n\n  var IsMountedPostMixin = {\n    componentWillUnmount: function() {\n      this.__isMounted = false;\n    }\n  };\n\n  /**\n   * Add more to the ReactClass base class. These are all legacy features and\n   * therefore not already part of the modern ReactComponent.\n   */\n  var ReactClassMixin = {\n    /**\n     * TODO: This will be deprecated because state should always keep a consistent\n     * type signature and the only use case for this, is to avoid that.\n     */\n    replaceState: function(newState, callback) {\n      this.updater.enqueueReplaceState(this, newState, callback);\n    },\n\n    /**\n     * Checks whether or not this composite component is mounted.\n     * @return {boolean} True if mounted, false otherwise.\n     * @protected\n     * @final\n     */\n    isMounted: function() {\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this.__didWarnIsMounted,\n          '%s: isMounted is deprecated. Instead, make sure to clean up ' +\n            'subscriptions and pending requests in componentWillUnmount to ' +\n            'prevent memory leaks.',\n          (this.constructor && this.constructor.displayName) ||\n            this.name ||\n            'Component'\n        );\n        this.__didWarnIsMounted = true;\n      }\n      return !!this.__isMounted;\n    }\n  };\n\n  var ReactClassComponent = function() {};\n  _assign(\n    ReactClassComponent.prototype,\n    ReactComponent.prototype,\n    ReactClassMixin\n  );\n\n  /**\n   * Creates a composite component class given a class specification.\n   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass\n   *\n   * @param {object} spec Class specification (which must define `render`).\n   * @return {function} Component constructor function.\n   * @public\n   */\n  function createClass(spec) {\n    // To keep our warnings more understandable, we'll use a little hack here to\n    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't\n    // unnecessarily identify a class without displayName as 'Constructor'.\n    var Constructor = identity(function(props, context, updater) {\n      // This constructor gets overridden by mocks. The argument is used\n      // by mocks to assert on what gets mounted.\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(\n          this instanceof Constructor,\n          'Something is calling a React component directly. Use a factory or ' +\n            'JSX instead. See: https://fb.me/react-legacyfactory'\n        );\n      }\n\n      // Wire up auto-binding\n      if (this.__reactAutoBindPairs.length) {\n        bindAutoBindMethods(this);\n      }\n\n      this.props = props;\n      this.context = context;\n      this.refs = emptyObject;\n      this.updater = updater || ReactNoopUpdateQueue;\n\n      this.state = null;\n\n      // ReactClasses doesn't have constructors. Instead, they use the\n      // getInitialState and componentWillMount methods for initialization.\n\n      var initialState = this.getInitialState ? this.getInitialState() : null;\n      if (process.env.NODE_ENV !== 'production') {\n        // We allow auto-mocks to proceed as if they're returning null.\n        if (\n          initialState === undefined &&\n          this.getInitialState._isMockFunction\n        ) {\n          // This is probably bad practice. Consider warning here and\n          // deprecating this convenience.\n          initialState = null;\n        }\n      }\n      _invariant(\n        typeof initialState === 'object' && !Array.isArray(initialState),\n        '%s.getInitialState(): must return an object or null',\n        Constructor.displayName || 'ReactCompositeComponent'\n      );\n\n      this.state = initialState;\n    });\n    Constructor.prototype = new ReactClassComponent();\n    Constructor.prototype.constructor = Constructor;\n    Constructor.prototype.__reactAutoBindPairs = [];\n\n    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));\n\n    mixSpecIntoComponent(Constructor, IsMountedPreMixin);\n    mixSpecIntoComponent(Constructor, spec);\n    mixSpecIntoComponent(Constructor, IsMountedPostMixin);\n\n    // Initialize the defaultProps property after all mixins have been merged.\n    if (Constructor.getDefaultProps) {\n      Constructor.defaultProps = Constructor.getDefaultProps();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      // This is a tag to indicate that the use of these method names is ok,\n      // since it's used with createClass. If it's not, then it's likely a\n      // mistake so we'll warn you to use the static property, property\n      // initializer or constructor respectively.\n      if (Constructor.getDefaultProps) {\n        Constructor.getDefaultProps.isReactClassApproved = {};\n      }\n      if (Constructor.prototype.getInitialState) {\n        Constructor.prototype.getInitialState.isReactClassApproved = {};\n      }\n    }\n\n    _invariant(\n      Constructor.prototype.render,\n      'createClass(...): Class specification must implement a `render` method.'\n    );\n\n    if (process.env.NODE_ENV !== 'production') {\n      warning(\n        !Constructor.prototype.componentShouldUpdate,\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.componentWillRecieveProps,\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n      warning(\n        !Constructor.prototype.UNSAFE_componentWillRecieveProps,\n        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +\n          'Did you mean UNSAFE_componentWillReceiveProps()?',\n        spec.displayName || 'A component'\n      );\n    }\n\n    // Reduce time spent doing lookups by setting these on the prototype.\n    for (var methodName in ReactClassInterface) {\n      if (!Constructor.prototype[methodName]) {\n        Constructor.prototype[methodName] = null;\n      }\n    }\n\n    return Constructor;\n  }\n\n  return createClass;\n}\n\nmodule.exports = factory;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AAEtC,IAAIC,WAAW,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AACjD,IAAIE,UAAU,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAE9C,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzC,IAAIC,OAAO,GAAGN,OAAO,CAAC,kBAAkB,CAAC;AAC3C;AAEA,IAAIO,UAAU,GAAG,QAAQ;;AAEzB;AACA;AACA,SAASC,QAAQA,CAACC,EAAE,EAAE;EACpB,OAAOA,EAAE;AACX;AAEA,IAAIC,0BAA0B;AAC9B,IAAIP,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;EACzCK,0BAA0B,GAAG;IAC3BC,IAAI,EAAE,MAAM;IACZC,OAAO,EAAE,SAAS;IAClBC,YAAY,EAAE;EAChB,CAAC;AACH,CAAC,MAAM;EACLH,0BAA0B,GAAG,CAAC,CAAC;AACjC;AAEA,SAASI,OAAOA,CAACC,cAAc,EAAEC,cAAc,EAAEC,oBAAoB,EAAE;EACrE;AACF;AACA;;EAEE,IAAIC,cAAc,GAAG,EAAE;;EAEvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,mBAAmB,GAAG;IACxB;AACJ;AACA;AACA;AACA;AACA;IACIC,MAAM,EAAE,aAAa;IAErB;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,OAAO,EAAE,aAAa;IAEtB;AACJ;AACA;AACA;AACA;AACA;IACIC,SAAS,EAAE,aAAa;IAExB;AACJ;AACA;AACA;AACA;AACA;IACIC,YAAY,EAAE,aAAa;IAE3B;AACJ;AACA;AACA;AACA;AACA;IACIC,iBAAiB,EAAE,aAAa;IAEhC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,eAAe,EAAE,oBAAoB;IAErC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,eAAe,EAAE,oBAAoB;IAErC;AACJ;AACA;AACA;IACIC,eAAe,EAAE,oBAAoB;IAErC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,MAAM,EAAE,aAAa;IAErB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,kBAAkB,EAAE,aAAa;IAEjC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,iBAAiB,EAAE,aAAa;IAEhC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,yBAAyB,EAAE,aAAa;IAExC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,qBAAqB,EAAE,aAAa;IAEpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,mBAAmB,EAAE,aAAa;IAElC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,kBAAkB,EAAE,aAAa;IAEjC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,oBAAoB,EAAE,aAAa;IAEnC;AACJ;AACA;AACA;AACA;IACIC,yBAAyB,EAAE,aAAa;IAExC;AACJ;AACA;AACA;AACA;IACIC,gCAAgC,EAAE,aAAa;IAE/C;AACJ;AACA;AACA;AACA;IACIC,0BAA0B,EAAE,aAAa;IAEzC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,eAAe,EAAE;EACnB,CAAC;;EAED;AACF;AACA;EACE,IAAIC,yBAAyB,GAAG;IAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,wBAAwB,EAAE;EAC5B,CAAC;;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"},"metadata":{},"sourceType":"script","externalDependencies":[]}