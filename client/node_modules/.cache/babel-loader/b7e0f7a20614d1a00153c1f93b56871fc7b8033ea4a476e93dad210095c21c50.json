{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nexports.__esModule = true;\nexports.default = NumberSchema;\nvar _inherits = _interopRequireDefault(require(\"./util/inherits\"));\nvar _mixed = _interopRequireDefault(require(\"./mixed\"));\nvar _locale = require(\"./locale\");\nvar _isAbsent = _interopRequireDefault(require(\"./util/isAbsent\"));\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\nvar isInteger = function isInteger(val) {\n  return (0, _isAbsent.default)(val) || val === (val | 0);\n};\nfunction NumberSchema() {\n  var _this = this;\n  if (!(this instanceof NumberSchema)) return new NumberSchema();\n  _mixed.default.call(this, {\n    type: 'number'\n  });\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      var parsed = value;\n      if (typeof parsed === 'string') {\n        parsed = parsed.replace(/\\s/g, '');\n        if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n        parsed = +parsed;\n      }\n      if (this.isType(parsed)) return parsed;\n      return parseFloat(parsed);\n    });\n  });\n}\n(0, _inherits.default)(NumberSchema, _mixed.default, {\n  _typeCheck: function _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  },\n  min: function min(_min, message) {\n    if (message === void 0) {\n      message = _locale.number.min;\n    }\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min: _min\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value >= this.resolve(_min);\n      }\n    });\n  },\n  max: function max(_max, message) {\n    if (message === void 0) {\n      message = _locale.number.max;\n    }\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max: _max\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value <= this.resolve(_max);\n      }\n    });\n  },\n  lessThan: function lessThan(less, message) {\n    if (message === void 0) {\n      message = _locale.number.lessThan;\n    }\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less: less\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value < this.resolve(less);\n      }\n    });\n  },\n  moreThan: function moreThan(more, message) {\n    if (message === void 0) {\n      message = _locale.number.moreThan;\n    }\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more: more\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value > this.resolve(more);\n      }\n    });\n  },\n  positive: function positive(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.positive;\n    }\n    return this.moreThan(0, msg);\n  },\n  negative: function negative(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.negative;\n    }\n    return this.lessThan(0, msg);\n  },\n  integer: function integer(message) {\n    if (message === void 0) {\n      message = _locale.number.integer;\n    }\n    return this.test({\n      name: 'integer',\n      message: message,\n      test: isInteger\n    });\n  },\n  truncate: function truncate() {\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? value | 0 : value;\n    });\n  },\n  round: function round(method) {\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? Math[method](value) : value;\n    });\n  }\n});\nmodule.exports = exports[\"default\"];","map":{"version":3,"names":["_interopRequireDefault","require","exports","__esModule","default","NumberSchema","_inherits","_mixed","_locale","_isAbsent","isNaN","value","isInteger","val","_this","call","type","withMutation","transform","parsed","replace","NaN","isType","parseFloat","_typeCheck","Number","valueOf","min","_min","message","number","test","name","exclusive","params","resolve","max","_max","lessThan","less","moreThan","more","positive","msg","negative","integer","truncate","round","method","avail","toLowerCase","indexOf","TypeError","join","Math","module"],"sources":["/Users/GAMJA/Desktop/nodejs프로젝트/boilerplate-mern-stack-master/client/node_modules/yup/lib/number.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = NumberSchema;\n\nvar _inherits = _interopRequireDefault(require(\"./util/inherits\"));\n\nvar _mixed = _interopRequireDefault(require(\"./mixed\"));\n\nvar _locale = require(\"./locale\");\n\nvar _isAbsent = _interopRequireDefault(require(\"./util/isAbsent\"));\n\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\n\nvar isInteger = function isInteger(val) {\n  return (0, _isAbsent.default)(val) || val === (val | 0);\n};\n\nfunction NumberSchema() {\n  var _this = this;\n\n  if (!(this instanceof NumberSchema)) return new NumberSchema();\n\n  _mixed.default.call(this, {\n    type: 'number'\n  });\n\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      var parsed = value;\n\n      if (typeof parsed === 'string') {\n        parsed = parsed.replace(/\\s/g, '');\n        if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n        parsed = +parsed;\n      }\n\n      if (this.isType(parsed)) return parsed;\n      return parseFloat(parsed);\n    });\n  });\n}\n\n(0, _inherits.default)(NumberSchema, _mixed.default, {\n  _typeCheck: function _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  },\n  min: function min(_min, message) {\n    if (message === void 0) {\n      message = _locale.number.min;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min: _min\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value >= this.resolve(_min);\n      }\n    });\n  },\n  max: function max(_max, message) {\n    if (message === void 0) {\n      message = _locale.number.max;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max: _max\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value <= this.resolve(_max);\n      }\n    });\n  },\n  lessThan: function lessThan(less, message) {\n    if (message === void 0) {\n      message = _locale.number.lessThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less: less\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value < this.resolve(less);\n      }\n    });\n  },\n  moreThan: function moreThan(more, message) {\n    if (message === void 0) {\n      message = _locale.number.moreThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more: more\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value > this.resolve(more);\n      }\n    });\n  },\n  positive: function positive(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.positive;\n    }\n\n    return this.moreThan(0, msg);\n  },\n  negative: function negative(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.negative;\n    }\n\n    return this.lessThan(0, msg);\n  },\n  integer: function integer(message) {\n    if (message === void 0) {\n      message = _locale.number.integer;\n    }\n\n    return this.test({\n      name: 'integer',\n      message: message,\n      test: isInteger\n    });\n  },\n  truncate: function truncate() {\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? value | 0 : value;\n    });\n  },\n  round: function round(method) {\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? Math[method](value) : value;\n    });\n  }\n});\nmodule.exports = exports[\"default\"];"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}